---
import Layout from "../../layouts/Layout.astro";
import pb from "../../utils/pb";
import { Collections } from "../../utils/pocketbase-types";
import { ui, defaultLang } from '../../i18n/ui.js';

// Récupération de la langue actuelle
const currentLanguage = Astro.cookies.get("language")?.value || defaultLang;
const locale = (Object.keys(ui).includes(currentLanguage) ? currentLanguage : defaultLang) as keyof typeof ui;

const id = Astro.params.id;
if (!id) {
  return Astro.redirect('/library');
}
const svg = await pb.collection(Collections.Svg).getOne(id);
console.log("Gallery - SVG data:", Object.keys(svg));
console.log("Gallery - SVG updated field:", svg.updated);
---

<Layout title={`SVG - ${svg.name}`} currentPage="library">
  <main class="h-full bg-gradient-to-br from-gray-900 via-purple-900 to-violet-900 p-6 overflow-y-auto">
    <div class="max-w-4xl mx-auto">
      <!-- Bouton retour -->
      <div class="mb-6">
        <a href="/library" class="inline-flex items-center text-violet-400 hover:text-violet-300 transition-colors">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/>
          </svg>
          {ui[locale].gallery.backToLibrary}
        </a>
      </div>

      <!-- En-tête avec titre et métadonnées -->
      <div class="bg-gray-800 rounded-xl p-6 border border-gray-700 shadow-xl mb-6">
        <div class="flex justify-between items-start mb-4">
          <h1 class="text-3xl font-bold text-white">{svg.name}</h1>
          {svg.creator && (
            <span class="text-sm text-violet-400 bg-violet-900/30 px-3 py-1 rounded-full">
              {ui[locale].gallery.createdBy} {svg.creator}
            </span>
          )}
        </div>
        
        {svg.tags && svg.tags.trim() && (
          <div class="flex flex-wrap gap-2 mb-4">
            {svg.tags.split(',').map((tag: string) => tag.trim()).filter((tag: string) => tag).map((tag: string) => (
              <span class="inline-block text-xs bg-gray-700 text-gray-300 px-2 py-1 rounded-md">
                #{tag}
              </span>
            ))}
          </div>
        )}
        
        <div class="text-sm text-gray-400">
          <p>{ui[locale].gallery.createdOn} {new Date(svg.updated).toLocaleDateString(locale === 'en' ? 'en-US' : 'fr-FR', { 
            year: 'numeric', 
            month: 'long', 
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
          })}</p>
        </div>
      </div>

      <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <!-- Affichage du SVG -->
        <div class="bg-gray-800 rounded-xl p-6 border border-gray-700 shadow-xl">
          <h2 class="text-xl font-semibold text-white mb-4 flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 mr-2 text-violet-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/>
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"/>
            </svg>
            {ui[locale].gallery.preview}
          </h2>
          
          <div class="bg-gray-900 border border-gray-600 rounded-lg p-6 flex items-center justify-center min-h-[300px]" set:html={svg.code_svg}>
          </div>
          
          <div class="mt-4 flex gap-2">
            <button id="copy-svg-btn" class="flex-1 px-4 py-2 bg-violet-600 hover:bg-violet-700 text-white rounded-lg transition-colors flex items-center justify-center">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"/>
              </svg>
              {ui[locale].gallery.copyCode}
            </button>
            <button id="download-svg-btn" class="flex-1 px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg transition-colors flex items-center justify-center">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
              </svg>
              {ui[locale].gallery.download}
            </button>
          </div>
        </div>

        <!-- Historique des échanges -->
        <div class="bg-gray-800 rounded-xl p-6 border border-gray-700 shadow-xl">
          <h2 class="text-xl font-semibold text-white mb-4 flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 mr-2 text-violet-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"/>
            </svg>
            {ui[locale].gallery.chatHistory}
          </h2>
          
          <div class="space-y-4 max-h-96 overflow-y-auto" set:html={(() => {
              let chatHistory = svg.chat_history || '';
              
              // Essayer de parser comme JSON si c'est le format ancien
              if ((chatHistory.startsWith('[') || chatHistory.startsWith('{') || chatHistory.startsWith('"[')) && chatHistory.includes('"role"')) {
                try {
                  // Nettoyer les guillemets externes si nécessaires
                  if (chatHistory.startsWith('"') && chatHistory.endsWith('"')) {
                    chatHistory = chatHistory.slice(1, -1);
                  }
                  const parsed = JSON.parse(chatHistory);
                  const messages = Array.isArray(parsed) ? parsed : [parsed];
                  
                  // Rendu des messages avec Astro
                  return messages.map((msg, index) => {
                    const isUser = msg.role === 'user';
                    const bgClass = isUser ? 'bg-violet-900/30 ml-4' : 'bg-gray-700 mr-4';
                    const iconColor = isUser ? 'text-violet-400' : 'text-green-400';
                    const labelColor = isUser ? 'text-violet-300' : 'text-green-300';
                    const label = isUser ? userLabel : assistantLabel;
                    
                    return `
                      <div class="p-3 rounded-lg ${bgClass}">
                        <div class="flex items-center mb-2">
                          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2 ${iconColor}" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            ${isUser 
                              ? '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/>'
                              : '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"/>'
                            }
                          </svg>
                          <span class="text-sm font-medium ${labelColor}">${label}</span>
                        </div>
                        <div class="text-sm text-gray-300">
                          ${msg.role === 'assistant' && msg.content.includes('<svg') 
                            ? '<div class="bg-gray-800 p-2 rounded text-xs font-mono overflow-x-auto">' + svgGeneratedLabel + '</div>'
                            : `<p>${msg.content}</p>`
                          }
                        </div>
                      </div>
                    `;
                  }).join('');
                } catch {
                  // Si le parsing échoue, afficher comme texte simple
                  return `
                    <div class="p-3 rounded-lg bg-violet-900/30">
                      <div class="flex items-center mb-2">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2 text-violet-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/>
                        </svg>
                        <span class="text-sm font-medium text-violet-300">${ui[locale].gallery.promptUser}</span>
                      </div>
                      <div class="text-sm text-gray-300">
                        <p>${chatHistory}</p>
                      </div>
                    </div>
                  `;
                }
              } else {
                // Format simple - juste le prompt
                return `
                  <div class="p-3 rounded-lg bg-violet-900/30">
                    <div class="flex items-center mb-2">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2 text-violet-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/>
                      </svg>
                      <span class="text-sm font-medium text-violet-300">${ui[locale].gallery.promptUser}</span>
                    </div>
                    <div class="text-sm text-gray-300">
                      <p>${chatHistory}</p>
                    </div>
                  </div>
                `;
              }
            })()}>
          </div>
        </div>
      </div>
    </div>
  </main>
</Layout>

<script define:vars={{ 
  svgCode: svg.code_svg, 
  svgName: svg.name, 
  copiedText: "Copié !",
  userLabel: ui[locale].gallery.user,
  assistantLabel: ui[locale].gallery.assistant,
  svgGeneratedLabel: ui[locale].gallery.svgGenerated
}}>
  // Copier le code SVG
  const copySvgBtn = document.getElementById('copy-svg-btn');
  if (copySvgBtn) {
    copySvgBtn.addEventListener('click', async () => {
      try {
        await navigator.clipboard.writeText(svgCode);
        const originalText = copySvgBtn.textContent;
        copySvgBtn.textContent = copiedText;
        copySvgBtn.style.backgroundColor = '#10b981';
        setTimeout(() => {
          copySvgBtn.textContent = originalText;
          copySvgBtn.style.backgroundColor = '';
        }, 2000);
      } catch (err) {
        console.error('Erreur lors de la copie:', err);
      }
    });
  }

  // Télécharger le SVG
  const downloadSvgBtn = document.getElementById('download-svg-btn');
  if (downloadSvgBtn) {
    downloadSvgBtn.addEventListener('click', () => {
      const blob = new Blob([svgCode], { type: 'image/svg+xml' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `${svgName}.svg`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    });
  }
</script>