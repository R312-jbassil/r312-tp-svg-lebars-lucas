---
// Import du layout existant
import Layout from '../layouts/Layout.astro';
import { ui, defaultLang } from '../i18n/ui.js';

// Récupération de la langue actuelle
const currentLanguage = Astro.cookies.get("language")?.value || defaultLang;
const locale = (Object.keys(ui).includes(currentLanguage) ? currentLanguage : defaultLang) as keyof typeof ui;
---

<Layout currentPage="generator">
    <Fragment slot="head">
        <style>
            /* Amélioration de l'affichage des SVG générés */
            #svg-container {
                background: hsl(var(--b1));
            }
            
            #svg-container svg {
                max-width: 95%;
                max-height: 95%;
                width: auto;
                height: auto;
                object-fit: contain;
            }
            
            /* Thème personnalisé avec animations */
            @keyframes gradient {
                0% { background-position: 0% 50%; }
                50% { background-position: 100% 50%; }
                100% { background-position: 0% 50%; }
            }
            
            .animated-gradient {
                background: linear-gradient(-45deg, #1f2937, #4c1d95, #7c3aed, #3730a3);
                background-size: 400% 400%;
                animation: gradient 15s ease infinite;
            }
            
            /* Amélioration des boutons */
            .btn-enhanced {
                transition: all 0.3s ease;
                transform: translateY(0px);
            }
            
            .btn-enhanced:hover {
                transform: translateY(-2px);
                box-shadow: 0 4px 12px rgba(139, 92, 246, 0.3);
            }
            
            /* Responsive amélioré */
            @media (max-width: 1279px) {
                .mobile-stack {
                    flex-direction: column;
                }
                
                .mobile-full {
                    width: 100% !important;
                }
                
                .mobile-full:first-child {
                    height: 60vh !important;
                    min-height: 450px !important;
                }
                
                .mobile-full:last-child {
                    height: 40vh !important;
                    min-height: 350px !important;
                }
            }
            
            /* Amélioration de l'utilisation de l'espace */
            @media (min-width: 1280px) {
                .desktop-full-height {
                    height: calc(100vh - 4rem) !important;
                }
            }
        </style>
    </Fragment>
    
    <!-- Zone principale avec disposition moderne qui prend toute la hauteur (responsive) -->
    <div class="flex-1 flex flex-col xl:flex-row bg-base-100 p-2 sm:p-4 lg:p-6 gap-3 lg:gap-6 mobile-stack desktop-full-height">
            
            <!-- Première div : Affichage du SVG (panneau gauche - responsive) -->
            <div class="mobile-full w-full xl:w-1/2 h-[60vh] xl:h-full card bg-base-200 shadow-xl flex flex-col">
                <div class="card-body pb-2 pt-3">
                    <h2 class="card-title text-base-content text-base sm:text-lg justify-start">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 sm:h-6 sm:w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/>
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"/>
                        </svg>
                        <span class="hidden sm:inline">{ui[locale].generator.preview}</span>
                        <span class="sm:hidden">Aperçu</span>
                    </h2>
                </div>
                
                <!-- Zone d'affichage du SVG (prend la majeure partie de l'espace) -->
                <div class="flex-1 px-2 sm:px-4 flex items-center justify-center min-h-0">
                    <div id="svg-container" class="w-full h-full flex items-center justify-center rounded-xl border-2 border-base-300 overflow-hidden relative min-h-[300px] sm:min-h-[400px] lg:min-h-[500px]">
                        <div class="text-center text-base-content/50">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-16 w-16 mx-auto mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"/>
                            </svg>
                            <p class="text-sm sm:text-lg font-medium text-base-content">{ui[locale].generator.noSvg}</p>
                            <p class="text-xs sm:text-sm text-base-content/70 mt-2 px-4 text-center">{ui[locale].generator.description}</p>
                        </div>
                    </div>
                </div>
                
                <!-- Stats en bas -->
                <div class="card-body pt-2">
                    <div class="stats stats-horizontal lg:stats-vertical xl:stats-horizontal shadow bg-base-200">
                        <div class="stat py-1 px-2">
                            <div class="stat-title text-xs">Dimensions</div>
                            <div class="stat-value text-xs sm:text-sm" id="svg-dimensions">--×--px</div>
                        </div>
                        <div class="stat py-1 px-2">
                            <div class="stat-title text-xs">Éléments</div>
                            <div class="stat-value text-xs sm:text-sm" id="svg-elements">0</div>
                        </div>
                        <div class="stat py-1 px-2">
                            <div class="stat-title text-xs">Taille</div>
                            <div class="stat-value text-xs sm:text-sm" id="svg-size">-- KB</div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Deuxième div : Chat + Zone de saisie (panneau droit - responsive) -->
            <div class="mobile-full w-full xl:w-1/2 h-[40vh] xl:h-full card bg-base-300 shadow-xl flex flex-col">
                <!-- En-tête de la conversation -->
                <div class="px-2 sm:px-4 py-2 border-b border-gray-800 flex flex-col sm:flex-row items-start sm:items-center justify-between rounded-t-2xl bg-gray-900 gap-2">
                    <div class="flex items-center gap-2">
                        <div class="w-2 h-2 bg-red-500 rounded-full"></div>
                        <div class="w-2 h-2 bg-yellow-500 rounded-full"></div>
                        <div class="w-2 h-2 bg-green-500 rounded-full"></div>
                        <span class="ml-3 text-gray-400 text-xs flex items-center gap-2">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"/>
                            </svg>
                            {ui[locale].generator.conversation}
                        </span>
                    </div>
                    <div class="flex gap-1 sm:gap-2 flex-wrap">
                        <button id="copy-btn" class="btn btn-xs sm:btn-sm btn-secondary">{ui[locale].generator.copy}</button>
                        <button id="download-btn" class="btn btn-xs sm:btn-sm btn-primary">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 sm:h-4 sm:w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
                            </svg>
                            <span class="hidden sm:inline">{ui[locale].gallery.download}</span>
                        </button>
                        <button id="save-btn" class="btn btn-xs sm:btn-sm btn-success">{ui[locale].generator.save}</button>
                    </div>
                    
                    <!-- Formulaire de métadonnées pour la sauvegarde -->
                    <div id="metadata-form" class="mt-3 p-3 bg-gray-800 rounded-lg hidden">
                        <div class="grid grid-cols-1 gap-2 text-xs">
                            <input 
                                id="svg-name-input" 
                                type="text" 
                                placeholder="Nom du SVG" 
                                class="input input-xs bg-gray-700 border-gray-600 text-gray-200 placeholder-gray-400"
                            />
                            <input 
                                id="svg-creator-input" 
                                type="text" 
                                placeholder="Créateur (optionnel)" 
                                class="input input-xs bg-gray-700 border-gray-600 text-gray-200 placeholder-gray-400"
                            />
                            <input 
                                id="svg-tags-input" 
                                type="text" 
                                placeholder="Tags séparés par des virgules" 
                                class="input input-xs bg-gray-700 border-gray-600 text-gray-200 placeholder-gray-400"
                            />
                            <div class="flex gap-2 mt-1">
                                <button id="confirm-save-btn" type="button" class="btn btn-xs btn-primary flex-1">Sauvegarder</button>
                                <button id="cancel-save-btn" type="button" class="btn btn-xs btn-ghost flex-1">Annuler</button>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Zone de conversation (prend la majeure partie de l'espace) -->
                <div class="flex-1 p-4 min-h-0">
                    <div id="chat-history" class="flex flex-col gap-4 w-full h-full overflow-y-auto mb-4">
                        <div class="text-center text-gray-500 flex items-center justify-center h-full">
                            <div>
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 mx-auto mb-3 text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"/>
                                </svg>
                                <p class="text-sm font-medium">{ui[locale].generator.noConversation}</p>
                                <p class="text-xs text-gray-400 mt-1">{ui[locale].generator.historyDesc}</p>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Formulaire de chat en bas du panneau droit -->
                <form id="input-prompt-form" class="border-t border-gray-800 bg-gray-900 p-2 sm:p-4 rounded-b-2xl" autocomplete="off">
                    <!-- Champs cachés pour l'historique et l'ID (pour compatibilité future) -->
                    <input type="hidden" name="history" id="history-input" value="" />
                    <input type="hidden" name="id" id="svg-id-input" value="" />
                    
                    <div class="flex flex-col gap-2 w-full">
                        <div class="flex items-center gap-2 mb-2 flex-wrap">
                            <label class="text-xs text-gray-400 hidden sm:block">{ui[locale].generator.modelLabel}:</label>
                            <select id="model-select" class="select select-xs sm:select-sm bg-gray-800 border-gray-600 text-gray-200 flex-1 sm:flex-none sm:w-52">
                                <option value="gpt-4o-mini">GPT-4o Mini (Recommandé)</option>
                                <option value="gpt-4o">GPT-4o (Premium)</option>
                                <option value="claude-3.5-sonnet">Claude 3.5 Sonnet</option>
                                <option value="deepseek-coder">DeepSeek Coder</option>
                                <option value="qwen-coder">Qwen 2.5 Coder</option>
                                <option value="codellama">CodeLlama 34B</option>
                                <option value="mistral-7b">Mistral 7B (Gratuit)</option>
                                <option value="llama-3.1">Llama 3.1 8B (Gratuit)</option>
                            </select>
                        </div>
                        <div class="flex flex-col sm:flex-row items-stretch sm:items-center gap-2">
                            <input 
                                id="prompt-input" 
                                name="editPrompt" 
                                type="text" 
                                class="input input-sm sm:input-md flex-grow bg-gray-800 border-gray-600 text-gray-200 placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-violet-500 focus:border-violet-500" 
                                placeholder={ui[locale].generator.placeholder}
                            />
                            <div class="flex gap-2">
                                <button id="generate-button" class="btn btn-sm sm:btn-md btn-primary btn-enhanced flex-1 sm:flex-none" type="submit">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 sm:h-4 sm:w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"/>
                                    </svg>
                                    <span class="hidden sm:inline">{ui[locale].generator.generate}</span>
                                    <span class="sm:hidden">{ui[locale].generator.generate}</span>
                                </button>
                                <button id="edit-button" class="btn btn-sm sm:btn-md btn-secondary btn-enhanced flex-1 sm:flex-none" type="button">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 sm:h-4 sm:w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z"/>
                                    </svg>
                                    <span class="hidden sm:inline">{ui[locale].generator.edit}</span>
                                    <span class="sm:hidden">{ui[locale].generator.edit}</span>
                                </button>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    
    <Fragment slot="scripts">
        <script>
    //@ts-nocheck
    
    // Variables globales pour la sauvegarde
    let currentSvgCode = '';
    let currentPrompt = '';
    
    // Liste pour l'historique des échanges
    let promptList = [];
    
    // Fonction pour optimiser l'affichage du SVG (plus simple et permissive)
    function optimizeSvgDisplay(svgCode) {
        if (!svgCode) return;
        
        const svgContainer = document.getElementById('svg-container');
        const svgElement = svgContainer.querySelector('svg');
        
        if (svgElement) {
            // Laisser le SVG prendre sa taille naturelle mais dans les limites du conteneur
            svgElement.style.maxWidth = '95%';
            svgElement.style.maxHeight = '95%'; 
            svgElement.style.width = 'auto';
            svgElement.style.height = 'auto';
            
            console.log('SVG affiché avec taille naturelle optimisée');
        }
    }
    
    // Fonction pour mettre à jour les statistiques du SVG
    function updateSvgStats(svgCode) {
        if (!svgCode) {
            document.getElementById('svg-dimensions').textContent = '--×--px';
            document.getElementById('svg-elements').textContent = '0';
            document.getElementById('svg-size').textContent = '-- KB';
            return;
        }

        // Extraire les dimensions
        const widthMatch = svgCode.match(/width="(\d+)"/);
        const heightMatch = svgCode.match(/height="(\d+)"/);
        const width = widthMatch ? widthMatch[1] : '300';
        const height = heightMatch ? heightMatch[1] : '200';
        
        // Compter les éléments
        const elementCount = (svgCode.match(/<(rect|circle|ellipse|line|polyline|polygon|path|text|g)/gi) || []).length;
        
        // Calculer la taille
        const sizeInBytes = new Blob([svgCode]).size;
        const sizeInKB = (sizeInBytes / 1024).toFixed(1);
        
        // Mettre à jour l'affichage
        document.getElementById('svg-dimensions').textContent = `${width}×${height}px`;
        document.getElementById('svg-elements').textContent = `${elementCount}`;
        document.getElementById('svg-size').textContent = `${sizeInKB} KB`;
    }
    
    // Références aux éléments du DOM
    const form = document.getElementById('input-prompt-form');
    const svgPreview = document.getElementById('svg-container');
    const chatHistory = document.getElementById('chat-history');
    
    // Observer le redimensionnement pour réajuster le SVG
    const resizeObserver = new ResizeObserver((entries) => {
        if (currentSvgCode && svgPreview.querySelector('svg')) {
            setTimeout(() => {
                optimizeSvgDisplay(currentSvgCode);
            }, 100);
        }
    });
    
    if (svgPreview) {
        resizeObserver.observe(svgPreview);
    }
	
    // Fonction pour générer le SVG à partir du prompt
    async function generateSVG(messages) {
        console.log('Generating SVG for messages:', messages);
        const selectedModel = document.getElementById('model-select').value;
        const res = await fetch('/api/generateSVG', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ 
                messages: messages,
                model: selectedModel 
            }),
        });
        const data = await res.json();
        return data.svg; // Retourne l'objet complet comme avant
    }

    // Fonction pour mettre à jour un SVG existant dans PocketBase
    async function update(updatedData) {
        const response = await fetch("/api/updateSVG", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(updatedData),
        });
        return response;
    }

    // Fonction pour mettre à jour manuellement un SVG (exemple d'utilisation)
    async function updateSVGManually() {
        const formData = new FormData(form);
        
        if (!formData.get("id")) {
            alert("Aucun SVG � sauvegarder");
            return;
        }

        try {
            const response = await update({
                id: formData.get("id"),
                code_svg: currentSvgCode,
                chat_history: JSON.stringify(promptList),
            });
            
            const data = await response.json();

            if (data.success) {
                alert("SVG sauvegard� automatiquement");
            } else {
                alert("Erreur d'�dition" + ": " + (data.error || "Erreur inconnue"));
            }
        } catch (error) {
            console.error('Erreur lors de la mise à jour manuelle:', error);
            alert("Erreur d'�dition" + ": " + error.message);
        }
    }


    
    // Fonction pour échapper le HTML
    function escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }





    // Fonction utilitaire pour sauvegarder le SVG - Style prof
    const saveButton = document.getElementById("save-btn");

    async function saveSVG(params) {
        // Envoi de la requête à notre endpoint
        const res = await fetch("/api/saveSVG", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(params),
        });
        return await res.json();
    }

    // Gestionnaire d'événements pour le bouton de sauvegarde - Style prof
    if (saveButton) {
        saveButton.addEventListener("click", async () => {
            if (!currentSvgCode) {
                alert("Aucun SVG à sauvegarder");
                return;
            }

            // Récupérer l'utilisateur depuis le localStorage
            const user = JSON.parse(localStorage.getItem("user"));
            if (!user || !user.id) {
                alert("Erreur : utilisateur non trouvé. Veuillez vous reconnecter.");
                return;
            }

            // Afficher le formulaire de métadonnées
            const metadataForm = document.getElementById('metadata-form');
            metadataForm.classList.remove('hidden');
            
            // Gérer la confirmation de sauvegarde
            document.getElementById('confirm-save-btn').onclick = async () => {
                const name = document.getElementById('svg-name-input').value.trim();
                if (!name) {
                    alert('Veuillez saisir un nom pour votre SVG');
                    return;
                }
                
                const creator = document.getElementById('svg-creator-input').value.trim();
                const tags = document.getElementById('svg-tags-input').value.trim();

                console.log("Préparation de la sauvegarde :", JSON.stringify(currentSvgCode));
                
                // Préparation des données pour la sauvegarde avec l'ID utilisateur
                const params = {
                    name: name,
                    code_svg: currentSvgCode || "<svg></svg>", // SVG par défaut si vide
                    chat_history: JSON.stringify(promptList), // Historique des échanges
                    user: user.id // ID de l'utilisateur connecté
                };
            
            // Sauvegarde et gestion de la réponse
            const result = await saveSVG(params);
            if (result.success) {
                alert("SVG sauvegardé avec succès !");
                
                    // Stocker l'ID du SVG sauvegardé pour les futures éditions
                    if (result.id) {
                        document.getElementById('svg-id-input').value = result.id;
                        console.log('SVG ID stocké pour futures éditions:', result.id);
                    }
                    
                    // Cacher le formulaire et réinitialiser les champs
                    metadataForm.classList.add('hidden');
                    document.getElementById('svg-name-input').value = '';
                    document.getElementById('svg-creator-input').value = '';
                    document.getElementById('svg-tags-input').value = '';
                } else {
                    alert("Erreur lors de la sauvegarde : " + result.error);
                }
            };
            
            // Gérer l'annulation
            document.getElementById('cancel-save-btn').onclick = () => {
                metadataForm.classList.add('hidden');
                document.getElementById('svg-name-input').value = '';
                document.getElementById('svg-creator-input').value = '';
                document.getElementById('svg-tags-input').value = '';
            };
        });
    }



    // Fonction pour générer un nouveau SVG (bouton Générer)
    async function handleGenerate() {
        const promptInput = document.getElementById('prompt-input');
        const prompt = promptInput ? promptInput.value : "";
        
        if (!prompt.trim()) {
            alert("Veuillez saisir une description");
            return;
        }
        
        console.log("Génération : ", prompt);
        
        // Réinitialiser la liste des prompts pour une nouvelle génération
        promptList.length = 0; 
        promptList.push({ role: "user", content: prompt });
        
        // Afficher un spinner de chargement
        svgPreview.innerHTML = `<span class="loading loading-ring loading-xl"></span>`;
        
        // Réinitialiser la conversation
        chatHistory.innerHTML = `
            <div class="chat chat-start">
                <div class="chat-bubble bg-primary text-primary-content">
                    <pre class="text-xs whitespace-pre-wrap">${escapeHtml(prompt)}</pre>
                </div>
                <div class="chat-footer opacity-60 text-xs mt-1">user</div>
            </div>
        `;
        
        // Vider le champ de saisie
        promptInput.value = '';
        
        try {
            // Appeler la fonction pour générer le SVG
            let aiResponseObj = await generateSVG(promptList);
            let aiResponse = aiResponseObj.content;
            
            // Nettoyer le contenu s'il contient des balises markdown
            if (aiResponse.includes('```svg')) {
                aiResponse = aiResponse.replace(/```svg\s*/, '').replace(/```\s*$/, '');
            }
            
            // Ajouter la réponse de l'IA à la liste des prompts
            promptList.push({ role: 'assistant', content: aiResponse });
            
            // Extraire le SVG de la réponse
            const svgMatch = aiResponse.match(/<svg[\s\S]*?<\/svg>/i);
            const svgCode = svgMatch ? svgMatch[0] : "";
            
            console.log("Code SVG généré : ", svgCode);
            
            // Afficher le SVG généré
            svgPreview.innerHTML = svgCode;
            
            // Optimiser l'affichage du SVG après un petit délai pour laisser le DOM se mettre à jour
            setTimeout(() => {
                optimizeSvgDisplay(svgCode);
            }, 100);
            
            // Sauvegarder pour les fonctions de copie/sauvegarde
            currentSvgCode = svgCode;
            currentPrompt = prompt;
            
            // Mettre à jour les statistiques
            updateSvgStats(svgCode);
            
            // Ajouter le code SVG à l'historique du chat
            const aiChatBubble = `
                <div class="chat chat-end">
                    <div class="chat-bubble bg-secondary text-secondary-content">
                        <div class="text-xs mb-2">Code SVG généré:</div>
                        <pre class="text-xs whitespace-pre-wrap overflow-x-auto max-w-full">${escapeHtml(svgCode)}</pre>
                    </div>
                    <div class="chat-footer opacity-60 text-xs mt-1">assistant</div>
                </div>
            `;
            chatHistory.innerHTML += aiChatBubble;
            
            // Mettre à jour le champ caché history
            document.getElementById('history-input').value = JSON.stringify(promptList);
            
        } catch (error) {
            console.error('Erreur lors de la génération:', error);
            svgPreview.innerHTML = `
                <div class="text-center text-red-500">
                    <p class="text-sm font-medium">Erreur de génération</p>
                    <p class="text-xs mt-1">${error.message}</p>
                </div>
            `;
        }
        
        // Scroll vers le bas pour voir le dernier message
        chatHistory.scrollTop = chatHistory.scrollHeight;
    }
    
    // Fonction pour éditer le SVG existant (bouton Edit)
    async function handleEdit() {
        const promptInput = document.getElementById('prompt-input');
        const prompt = promptInput ? promptInput.value : "";
        
        if (!prompt.trim()) {
            alert("Veuillez saisir une modification");
            return;
        }
        
        if (promptList.length === 0) {
            alert("Aucun SVG � �diter");
            return;
        }
        
        console.log("Édition : ", prompt);
        
        // Ajout du prompt de l'utilisateur à la liste existante
        promptList.push({ role: "user", content: prompt });
        
        // Afficher un spinner de chargement
        svgPreview.innerHTML = `<span class="loading loading-ring loading-xl"></span>`;
        
        // Ajouter le prompt utilisateur au chat
        const userChatBubble = `
            <div class="chat chat-start">
                <div class="chat-bubble bg-primary text-primary-content">
                    <pre class="text-xs whitespace-pre-wrap">${escapeHtml(prompt)}</pre>
                </div>
                <div class="chat-footer opacity-60 text-xs mt-1">user</div>
            </div>
        `;
        chatHistory.innerHTML += userChatBubble;
        
        // Vider le champ de saisie
        promptInput.value = '';
        
        try {
            // Appeler la fonction pour générer le SVG avec l'historique complet
            let aiResponseObj = await generateSVG(promptList);
            let aiResponse = aiResponseObj.content;
            
            // Nettoyer le contenu s'il contient des balises markdown
            if (aiResponse.includes('```svg')) {
                aiResponse = aiResponse.replace(/```svg\s*/, '').replace(/```\s*$/, '');
            }
            
            // Extraire le SVG de la réponse
            const svgMatch = aiResponse.match(/<svg[\s\S]*?<\/svg>/i);
            const svgCode = svgMatch ? svgMatch[0] : "";
            
            console.log("Code SVG modifié : ", svgCode);
            
            // Ajouter la réponse de l'IA à la liste des prompts
            promptList.push({ role: 'assistant', content: aiResponse });
            
            // Afficher le SVG généré
            svgPreview.innerHTML = svgCode;
            
            // Optimiser l'affichage du SVG après un petit délai
            setTimeout(() => {
                optimizeSvgDisplay(svgCode);
            }, 100);
            
            // Sauvegarder pour les fonctions de copie/sauvegarde
            currentSvgCode = svgCode;
            currentPrompt = prompt;
            
            // Ajouter le code SVG à l'historique du chat
            const aiChatBubble = `
                <div class="chat chat-end">
                    <div class="chat-bubble bg-secondary text-secondary-content">
                        <div class="text-xs mb-2">Code SVG modifié:</div>
                        <pre class="text-xs whitespace-pre-wrap overflow-x-auto max-w-full">${escapeHtml(svgCode)}</pre>
                    </div>
                    <div class="chat-footer opacity-60 text-xs mt-1">assistant</div>
                </div>
            `;
            chatHistory.innerHTML += aiChatBubble;
            
            // Mettre à jour le champ caché history
            document.getElementById('history-input').value = JSON.stringify(promptList);
            
            // Si nous éditons un SVG sauvegardé (avec ID), le mettre à jour automatiquement
            const svgId = document.getElementById('svg-id-input').value;
            if (svgId && svgId.trim() !== '') {
                try {
                    console.log('Mise à jour du SVG sauvegardé avec ID:', svgId);
                    const response = await update({
                        id: svgId,
                        code_svg: svgCode,
                        chat_history: JSON.stringify(promptList)
                    });
                    const updateResult = await response.json();
                    
                    if (updateResult.success) {
                        console.log('SVG mis à jour avec succès dans PocketBase');
                        // Optionnel : afficher une notification discrète
                        const notification = document.createElement('div');
                        notification.textContent = 'SVG sauvegardé automatiquement';
                        notification.className = 'fixed top-4 right-4 bg-green-600 text-white px-4 py-2 rounded-lg text-sm z-50';
                        document.body.appendChild(notification);
                        setTimeout(() => {
                            document.body.removeChild(notification);
                        }, 3000);
                    } else {
                        console.error('Erreur lors de la mise à jour:', updateResult.error);
                    }
                } catch (updateError) {
                    console.error('Erreur lors de la mise à jour automatique:', updateError);
                }
            }
            
        } catch (error) {
            console.error('Erreur lors de l\'édition:', error);
            svgPreview.innerHTML = `
                <div class="text-center text-red-500">
                    <p class="text-sm font-medium">Erreur d'édition</p>
                    <p class="text-xs mt-1">${error.message}</p>
                </div>
            `;
        }
        
        // Scroll vers le bas pour voir le dernier message
        chatHistory.scrollTop = chatHistory.scrollHeight;
        
        console.log("Historique des prompts : ", promptList);
    }

    // Écouteur d'événement pour le bouton Générer (soumission du formulaire)
    form?.addEventListener('submit', async (e) => {
        e.preventDefault(); // Empêche le rechargement de la page
        await handleGenerate();
    });

    // Gestion du bouton Edit séparément
    const editButton = document.getElementById('edit-button');
    if (editButton) {
        editButton.addEventListener('click', async () => {
            await handleEdit();
        });
    }

    // Fonctionnalité de téléchargement du SVG
    const downloadBtn = document.getElementById("download-btn");
    if (downloadBtn) {
        downloadBtn.addEventListener("click", () => {
            if (currentSvgCode) {
                const blob = new Blob([currentSvgCode], { type: 'image/svg+xml' });
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = `svg-${Date.now()}.svg`;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                URL.revokeObjectURL(url);
                
                // Feedback visuel
                const originalText = downloadBtn.innerHTML;
                downloadBtn.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 mr-1 inline" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/></svg>Téléchargé !';
                downloadBtn.style.backgroundColor = "#10b981";
                setTimeout(() => {
                    downloadBtn.innerHTML = originalText;
                    downloadBtn.style.backgroundColor = "";
                }, 2000);
            } else {
                alert("Aucun SVG à télécharger");
            }
        });
    }

    // Fonctionnalité de copie du code SVG
    const copyBtn = document.getElementById("copy-btn");
    if (copyBtn) {
        copyBtn.addEventListener("click", async () => {
            if (currentSvgCode) {
                try {
                    await navigator.clipboard.writeText(currentSvgCode);
                    // Feedback visuel temporaire
                    const originalText = copyBtn.textContent;
                    copyBtn.textContent = "Copi� !";
                    copyBtn.style.backgroundColor = "#10b981"; // vert
                    setTimeout(() => {
                        copyBtn.textContent = originalText;
                        copyBtn.style.backgroundColor = ""; // retour au style original
                    }, 2000);
                } catch (err) {
                    console.error('Erreur lors de la copie:', err);
                    // Fallback pour les anciens navigateurs
                    const textArea = document.createElement('textarea');
                    textArea.value = currentSvgCode;
                    document.body.appendChild(textArea);
                    textArea.select();
                    document.execCommand('copy');
                    document.body.removeChild(textArea);
                    
                    // Feedback visuel
                    const originalText = copyBtn.textContent;
                    copyBtn.textContent = "Copi� !";
                    setTimeout(() => {
                        copyBtn.textContent = originalText;
                    }, 2000);
                }
            } else {
                alert("Aucun SVG � copier");
            }
        });
    }

        </script>
    </Fragment>
</Layout>

