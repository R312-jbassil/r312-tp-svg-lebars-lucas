---
// Logique côté serveur (optionnelle)
const title = "Générateur SVG";
import "../styles/global.css";
---

<!DOCTYPE html>
<html lang="fr" data-theme="dark">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{title}</title>
    <style>
        /* Contraindre la taille des SVG générés */
        #svg-container svg {
            max-width: 100%;
            max-height: 100%;
            width: auto;
            height: auto;
            object-fit: contain;
        }
    </style>
</head>
<body class="bg-gray-900">
    <div class="h-screen flex flex-col">
        <!-- Navigation horizontale en haut -->
        <nav class="bg-gray-800 shadow-lg border-b border-gray-700">
            <div class="px-6 py-3">
                <div class="flex space-x-8">
                    <a href="/" class="text-gray-300 hover:text-violet-400 font-medium transition-colors">Home</a>
                    <a href="/generator" class="text-violet-400 font-medium border-b-2 border-violet-500 pb-1">Generator</a>
                    <a href="/library" class="text-gray-300 hover:text-violet-400 font-medium transition-colors">Library</a>
                </div>
            </div>
        </nav>
        
        <!-- Zone principale avec disposition moderne -->
        <div class="flex-1 flex bg-gradient-to-br from-gray-900 via-purple-900 to-violet-900 p-4 gap-4 min-h-0">
            
            <!-- Première div : Affichage du SVG (panneau gauche) -->
            <div class="w-1/2 bg-gray-800 rounded-2xl shadow-xl border border-gray-700 flex flex-col">
                <div class="px-4 py-2 border-b border-gray-700 bg-gray-750 rounded-t-2xl">
                    <h2 class="text-sm font-semibold text-violet-300 flex items-center gap-2">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/>
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"/>
                        </svg>
                        Aperçu SVG
                    </h2>
                </div>
                
                <!-- Zone d'affichage SVG -->
                <div class="flex-1 p-4 flex items-center justify-center bg-gray-800 min-h-0">
                    <div id="svg-container" class="bg-gray-900 rounded-lg shadow-inner border border-gray-600 p-4 w-full h-full flex items-center justify-center overflow-hidden">
                        <div class="text-center text-gray-500">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-16 w-16 mx-auto mb-4 text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"/>
                            </svg>
                            <p class="text-lg font-medium">Aucun SVG généré</p>
                            <p class="text-sm text-gray-400 mt-2">Entrez une description et cliquez sur "Générer SVG"</p>
                        </div>
                    </div>
                </div>
                
                <!-- Stats en bas -->
                <div class="px-4 py-2 bg-gray-750 border-t border-gray-700 rounded-b-2xl">
                    <div class="flex justify-between text-xs text-gray-400">
                        <span>--×--px</span>
                        <span>0 éléments</span>
                        <span>-- KB</span>
                    </div>
                </div>
            </div>
            
            <!-- Deuxième div : Chat + Zone de saisie (panneau droit) -->
            <div class="w-1/2 bg-black rounded-2xl shadow-xl border border-gray-800 flex flex-col">
                <!-- En-tête de la conversation -->
                <div class="px-4 py-2 border-b border-gray-800 flex items-center justify-between rounded-t-2xl bg-gray-900">
                    <div class="flex items-center gap-2">
                        <div class="w-2 h-2 bg-red-500 rounded-full"></div>
                        <div class="w-2 h-2 bg-yellow-500 rounded-full"></div>
                        <div class="w-2 h-2 bg-green-500 rounded-full"></div>
                        <span class="ml-3 text-gray-400 text-xs flex items-center gap-2">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"/>
                            </svg>
                            Conversation
                        </span>
                    </div>
                    <div class="flex gap-2">
                        <button id="copy-btn" class="px-2 py-1 bg-violet-600 hover:bg-violet-700 text-white text-xs rounded transition-colors">Copy SVG</button>
                        <button id="save-btn" class="px-2 py-1 bg-green-600 hover:bg-green-700 text-white text-xs rounded transition-colors">Sauvegarder</button>
                    </div>
                </div>
                
                <!-- Zone de conversation (prend la majeure partie de l'espace) -->
                <div class="flex-1 p-4 min-h-0">
                    <div id="chat-history" class="flex flex-col gap-4 w-full h-full overflow-y-auto mb-4">
                        <div class="text-center text-gray-500 flex items-center justify-center h-full">
                            <div>
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 mx-auto mb-3 text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"/>
                                </svg>
                                <p class="text-sm font-medium">Aucune conversation</p>
                                <p class="text-xs text-gray-400 mt-1">L'historique des échanges apparaîtra ici</p>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Formulaire de chat en bas du panneau droit -->
                <form id="input-prompt-form" class="border-t border-gray-800 bg-gray-900 p-4 rounded-b-2xl" autocomplete="off">
                    <!-- Champs cachés pour l'historique et l'ID (pour compatibilité future) -->
                    <input type="hidden" name="history" id="history-input" value="" />
                    <input type="hidden" name="id" id="svg-id-input" value="" />
                    
                    <div class="flex flex-col gap-2 w-full">
                        <div class="flex items-center gap-2">
                            <input 
                                id="prompt-input" 
                                name="editPrompt" 
                                type="text" 
                                class="input flex-grow bg-gray-800 border-gray-600 text-gray-200 placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-violet-500 focus:border-violet-500" 
                                placeholder="Enter a prompt to edit the SVG..." 
                            />
                            <button id="generate-button" class="btn btn-primary" type="submit">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"/>
                                </svg>
                                Générer
                            </button>
                            <button id="edit-button" class="btn btn-secondary" type="button">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z"/>
                                </svg>
                                Edit
                            </button>
                        </div>
                    </div>
                </form>
            </div>
        </div>

    </div>

    <!-- Modal de sauvegarde -->
    <div id="save-modal" class="fixed inset-0 bg-black bg-opacity-50 z-50 items-center justify-center p-4" style="display: none;">
        <div class="bg-gray-800 rounded-2xl max-w-md w-full">
            <div class="p-6">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-xl font-bold text-white">Sauvegarder le SVG</h3>
                    <button id="close-save-modal" class="text-gray-400 hover:text-white">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                        </svg>
                    </button>
                </div>
                
                <form id="save-form" class="space-y-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-300 mb-2">Titre *</label>
                        <input 
                            type="text" 
                            id="save-title"
                            required
                            class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-gray-200 placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-violet-500"
                            placeholder="Mon SVG génial"
                        />
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-gray-300 mb-2">Créé par</label>
                        <input 
                            type="text" 
                            id="save-author"
                            class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-gray-200 placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-violet-500"
                            placeholder="Votre nom (optionnel)"
                        />
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-gray-300 mb-2">Tags</label>
                        <input 
                            type="text" 
                            id="save-tags"
                            class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-gray-200 placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-violet-500"
                            placeholder="logo, violet, design (optionnel)"
                        />
                    </div>
                    
                    <div class="flex gap-3 pt-4">
                        <button 
                            type="button" 
                            id="cancel-save"
                            class="flex-1 px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white rounded-lg transition-colors"
                        >
                            Annuler
                        </button>
                        <button 
                            type="submit"
                            class="flex-1 px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg transition-colors"
                        >
                            Sauvegarder
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</body>
</html>

<script>
    //@ts-nocheck
    
    // Variables globales pour la sauvegarde
    let currentSvgCode = '';
    let currentPrompt = '';
    
    // Liste pour l'historique des échanges
    let promptList = [];
    
    // Références aux éléments du DOM
    const form = document.getElementById('input-prompt-form');
    const svgPreview = document.getElementById('svg-container');
    const chatHistory = document.getElementById('chat-history');
	
    // Fonction pour générer le SVG à partir du prompt
    async function generateSVG(messages) {
        console.log('Generating SVG for messages:', messages);
        const res = await fetch('/api/generateSVG', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ messages: messages }),
        });
        const data = await res.json();
        return data.svg; // Retourne l'objet complet comme avant
    }


    
    // Fonction pour échapper le HTML
    function escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }





    // Gestion de la sauvegarde - système fonctionnel restauré
    const saveBtn = document.getElementById("save-btn");
    const saveModal = document.getElementById("save-modal");
    const closeSaveModal = document.getElementById("close-save-modal");
    const cancelSave = document.getElementById("cancel-save");
    const saveForm = document.getElementById("save-form");

    if (saveBtn) {
        saveBtn.addEventListener("click", () => {
            if (currentSvgCode) {
                document.getElementById("save-title").value = '';
                document.getElementById("save-author").value = '';
                document.getElementById("save-tags").value = '';
                saveModal.style.display = 'flex';
            } else {
                alert("Aucun SVG à sauvegarder. Générez d'abord un SVG !");
            }
        });
    }

    if (closeSaveModal) {
        closeSaveModal.addEventListener("click", () => {
            saveModal.style.display = 'none';
        });
    }

    if (cancelSave) {
        cancelSave.addEventListener("click", () => {
            saveModal.style.display = 'none';
        });
    }

    if (saveForm) {
        saveForm.addEventListener("submit", async (e) => {
            e.preventDefault();
            
            const title = document.getElementById("save-title").value.trim();
            const author = document.getElementById("save-author").value.trim() || 'Anonyme';
            const tags = document.getElementById("save-tags").value.trim();

            if (!title) {
                alert("Le titre est requis !");
                return;
            }

            try {
                // Extraire le dernier prompt utilisateur pour un affichage propre
                const lastUserPrompt = promptList.filter(msg => msg.role === 'user').pop();
                const userPromptText = lastUserPrompt ? lastUserPrompt.content : currentPrompt || 'Prompt généré automatiquement';
                
                // Support des deux formats: ancien (title/prompt/svg_code) et nouveau (name/chat_history/code_svg)
                const response = await fetch('/api/saveSVG', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        // Format du prof
                        name: title,
                        chat_history: userPromptText,
                        code_svg: currentSvgCode,
                        // Format ancien pour compatibilité
                        title: title,
                        prompt: userPromptText,
                        svg_code: currentSvgCode,
                        created_by: author,
                        tags: tags
                    }),
                });

                const result = await response.json();

                if (result.success) {
                    alert("SVG sauvegardé avec succès !");
                    saveModal.style.display = 'none';
                } else {
                    alert("Erreur lors de la sauvegarde : " + (result.error || "Erreur inconnue"));
                }
            } catch (error) {
                console.error('Save error:', error);
                alert("Erreur lors de la sauvegarde : " + error.message);
            }
        });
    }



    // Écouteur d'événement pour le formulaire de soumission
    form?.addEventListener('submit', async (e) => {
        e.preventDefault(); // Empêche le rechargement de la page
        const formData = new FormData(form);
        console.log(JSON.stringify(Object.fromEntries(formData)));

        // Créez un objet pour le prompt de l'utilisateur
        let prompt = {
            role: 'user',
            content: formData.get('editPrompt')
        };

        // Récupérez l'historique des messages
        let history = [];
        try {
            const historyData = formData.get('history');
            if (historyData && historyData !== '') {
                history = JSON.parse(historyData);
            }
        } catch (e) {
            console.log('No previous history or error parsing:', e);
            history = [];
        }
        
        // Ajoutez le nouveau prompt à l'historique
        history.push(prompt);

        // Réinitialisez le champ de saisie
        document.getElementById('prompt-input').value = '';

        // Affichez un indicateur de chargement
        svgPreview.innerHTML = `<span class="loading loading-ring loading-xl"></span>`;
        
        // Ajoutez le prompt à l'historique du chat
        const userChatBubble = `
            <div class="chat chat-start">
                <div class="chat-bubble bg-primary text-primary-content">
                    <pre class="text-xs whitespace-pre-wrap">${escapeHtml(prompt.content)}</pre>
                </div>
                <div class="chat-footer opacity-60 text-xs mt-1">user</div>
            </div>
        `;
        
        // Si c'est le premier message, remplacer le placeholder
        if (chatHistory.innerHTML.includes('Aucune conversation')) {
            chatHistory.innerHTML = userChatBubble;
        } else {
            chatHistory.innerHTML += userChatBubble;
        }

        try {
            // Appelez la fonction pour générer le SVG
            let aiResponseObj = await generateSVG(history);
            let aiResponse = aiResponseObj.content;
            
            // Nettoyer le contenu s'il contient des balises markdown
            if (aiResponse.includes('```svg')) {
                aiResponse = aiResponse.replace(/```svg\s*/, '').replace(/```\s*$/, '');
            }
            
            // Ajoutez la réponse de l'IA à l'historique
            history.push({ role: 'assistant', content: aiResponse });

            // Extraire le SVG de la réponse
            const svgMatch = aiResponse.match(/<svg[\s\S]*?<\/svg>/i);
            const svgCode = svgMatch ? svgMatch[0] : "";

            console.log("aiResponse: ", aiResponse);
            console.log("svgCode: ", svgCode);
            
            // Mettez à jour l'affichage du SVG
            svgPreview.innerHTML = svgCode;

            // Sauvegarder pour les fonctions de copie/sauvegarde
            currentSvgCode = svgCode;
            currentPrompt = prompt.content;
            promptList = history; // Synchroniser avec l'ancien système

            // Ajoutez le code SVG à l'historique du chat
            const aiChatBubble = `
                <div class="chat chat-end">
                    <div class="chat-bubble bg-secondary text-secondary-content">
                        <div class="text-xs mb-2">Code SVG généré:</div>
                        <pre class="text-xs whitespace-pre-wrap overflow-x-auto max-w-full">${escapeHtml(svgCode)}</pre>
                    </div>
                    <div class="chat-footer opacity-60 text-xs mt-1">assistant</div>
                </div>
            `;
            chatHistory.innerHTML += aiChatBubble;

            // Mettre à jour le champ caché history
            document.getElementById('history-input').value = JSON.stringify(history);

        } catch (error) {
            console.error('Erreur lors de la génération:', error);
            svgPreview.innerHTML = `
                <div class="text-center text-red-500">
                    <p class="text-sm font-medium">Erreur de génération</p>
                    <p class="text-xs mt-1">${error.message}</p>
                </div>
            `;
        }

        // Scroll vers le bas pour voir le dernier message
        chatHistory.scrollTop = chatHistory.scrollHeight;
    });

    // Fonctionnalité de copie du code SVG
    const copyBtn = document.getElementById("copy-btn");
    if (copyBtn) {
        copyBtn.addEventListener("click", async () => {
            if (currentSvgCode) {
                try {
                    await navigator.clipboard.writeText(currentSvgCode);
                    // Feedback visuel temporaire
                    const originalText = copyBtn.textContent;
                    copyBtn.textContent = "Copié !";
                    copyBtn.style.backgroundColor = "#10b981"; // vert
                    setTimeout(() => {
                        copyBtn.textContent = originalText;
                        copyBtn.style.backgroundColor = ""; // retour au style original
                    }, 2000);
                } catch (err) {
                    console.error('Erreur lors de la copie:', err);
                    // Fallback pour les anciens navigateurs
                    const textArea = document.createElement('textarea');
                    textArea.value = currentSvgCode;
                    document.body.appendChild(textArea);
                    textArea.select();
                    document.execCommand('copy');
                    document.body.removeChild(textArea);
                    
                    // Feedback visuel
                    const originalText = copyBtn.textContent;
                    copyBtn.textContent = "Copié !";
                    setTimeout(() => {
                        copyBtn.textContent = originalText;
                    }, 2000);
                }
            } else {
                alert("Aucun SVG à copier. Générez d'abord un SVG !");
            }
        });
    }

</script>